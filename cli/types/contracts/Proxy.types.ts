/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface CanExecuteRelayResponse {
    can_execute: boolean;
    [k: string]: unknown;
}
export type CosmosMsgForEmpty =
    | {
          bank: BankMsg;
      }
    | {
          custom: Empty;
      }
    | {
          staking: StakingMsg;
      }
    | {
          distribution: DistributionMsg;
      }
    | {
          stargate: {
              type_url: string;
              value: Binary;
              [k: string]: unknown;
          };
      }
    | {
          ibc: IbcMsg;
      }
    | {
          wasm: WasmMsg;
      }
    | {
          gov: GovMsg;
      };
export type BankMsg =
    | {
          send: {
              amount: Coin[];
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          burn: {
              amount: Coin[];
              [k: string]: unknown;
          };
      };
export type Uint128 = string;
export type StakingMsg =
    | {
          delegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          undelegate: {
              amount: Coin;
              validator: string;
              [k: string]: unknown;
          };
      }
    | {
          redelegate: {
              amount: Coin;
              dst_validator: string;
              src_validator: string;
              [k: string]: unknown;
          };
      };
export type DistributionMsg =
    | {
          set_withdraw_address: {
              address: string;
              [k: string]: unknown;
          };
      }
    | {
          withdraw_delegator_reward: {
              validator: string;
              [k: string]: unknown;
          };
      };
export type Binary = string;
export type IbcMsg =
    | {
          transfer: {
              amount: Coin;
              channel_id: string;
              timeout: IbcTimeout;
              to_address: string;
              [k: string]: unknown;
          };
      }
    | {
          send_packet: {
              channel_id: string;
              data: Binary;
              timeout: IbcTimeout;
              [k: string]: unknown;
          };
      }
    | {
          close_channel: {
              channel_id: string;
              [k: string]: unknown;
          };
      };
export type Timestamp = Uint64;
export type Uint64 = number;
export type WasmMsg =
    | {
          execute: {
              contract_addr: string;
              funds: Coin[];
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          instantiate: {
              admin?: string | null;
              code_id: number;
              funds: Coin[];
              label: string;
              msg: Binary;
              [k: string]: unknown;
          };
      }
    | {
          migrate: {
              contract_addr: string;
              msg: Binary;
              new_code_id: number;
              [k: string]: unknown;
          };
      }
    | {
          update_admin: {
              admin: string;
              contract_addr: string;
              [k: string]: unknown;
          };
      }
    | {
          clear_admin: {
              contract_addr: string;
              [k: string]: unknown;
          };
      };
export type GovMsg = {
    vote: {
        proposal_id: number;
        vote: VoteOption;
        [k: string]: unknown;
    };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export type ExecuteMsgForEmpty =
    | {
          execute: {
              msgs: CosmosMsgForEmpty[];
              [k: string]: unknown;
          };
      }
    | {
          revert_freeze_status: {
              [k: string]: unknown;
          };
      }
    | {
          relay: {
              transaction: RelayTransaction;
              [k: string]: unknown;
          };
      }
    | {
          rotate_user_key: {
              new_user_address: string;
              [k: string]: unknown;
          };
      }
    | {
          add_relayer: {
              new_relayer_address: Addr;
              [k: string]: unknown;
          };
      }
    | {
          remove_relayer: {
              relayer_address: Addr;
              [k: string]: unknown;
          };
      }
    | {
          update_guardians: {
              guardians: Guardians;
              new_multisig_code_id?: number | null;
              [k: string]: unknown;
          };
      }
    | {
          update_label: {
              new_label: string;
              [k: string]: unknown;
          };
      }
    | {
          add_credential_pub_key: {
              credential_pub_key: WCredentialPubKey;
              [k: string]: unknown;
          };
      }
    | {
          remove_credential_pub_key: {
              [k: string]: unknown;
          };
      };
export type Addr = string;
export type BigNumberBytes = string;
export type WMap = [number[], BigNumberBytes][];
export type PointG1Bytes = string;
export type PointG2Bytes = string;
export interface RelayTransaction {
    message: Binary;
    nonce: number;
    signature: Binary;
    user_pubkey: Binary;
    [k: string]: unknown;
}
export interface Guardians {
    addresses: string[];
    guardians_multisig?: MultiSig | null;
    [k: string]: unknown;
}
export interface MultiSig {
    multisig_initial_funds: Coin[];
    threshold_absolute_count: number;
    [k: string]: unknown;
}
export interface WCredentialPubKey {
    p_key: WCredentialPrimaryPubKey;
    r_key?: WCredentialRevocationPubKey | null;
    [k: string]: unknown;
}
export interface WCredentialPrimaryPubKey {
    n: BigNumberBytes;
    r: WMap;
    rctxt: BigNumberBytes;
    s: BigNumberBytes;
    z: BigNumberBytes;
    [k: string]: unknown;
}
export interface WCredentialRevocationPubKey {
    g: PointG1Bytes;
    g_dash: PointG2Bytes;
    h: PointG1Bytes;
    h0: PointG1Bytes;
    h1: PointG1Bytes;
    h2: PointG1Bytes;
    h_cap: PointG2Bytes;
    htilde: PointG1Bytes;
    pk: PointG1Bytes;
    u: PointG2Bytes;
    y: PointG2Bytes;
    [k: string]: unknown;
}
export interface InfoResponse {
    code_id: number;
    guardians: Addr[];
    is_frozen: boolean;
    label: string;
    multisig_address?: Addr | null;
    multisig_code_id: number;
    nonce: number;
    relayers: Addr[];
    user_addr: Addr;
    version: ContractVersion;
    [k: string]: unknown;
}
export interface ContractVersion {
    contract: string;
    version: string;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    addr_prefix: string;
    code_id: number;
    create_wallet_msg: CreateWalletMsg;
    multisig_code_id: number;
    [k: string]: unknown;
}
export interface CreateWalletMsg {
    guardians: Guardians;
    label: string;
    proxy_initial_funds: Coin[];
    relayers: string[];
    user_addr: string;
    [k: string]: unknown;
}
export type QueryMsg =
    | {
          info: {
              [k: string]: unknown;
          };
      }
    | {
          can_execute_relay: {
              sender: string;
              [k: string]: unknown;
          };
      }
    | {
          credential_info: {
              [k: string]: unknown;
          };
      };
